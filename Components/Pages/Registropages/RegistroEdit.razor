@page "/Registro/Edit/{AporteId:int}"
@using JimmyConcepcion_P1_AP1.Services;
@using JimmyConcepcion_P1_AP1.Models
@inject RegistroServices RegistroServices
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<EditForm Model="@registro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white text-center">
            <h3><i class="fas fa-city"></i> Editar Registro</h3>
        </div>

        <div class="card-body">
            @* ID del registro *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="Id" class="form-label">ID registro:</label>
                    <InputNumber @bind-Value="registro.AporteId" class="form-control" disabled />
                </div>
            </div>

            @* Nombre del registro *@
            <div class="mb-3">
                <label for="Nombre" class="form-label">Nombre:</label>
                <InputText @bind-Value="registro.Persona" class="form-control" />
                <ValidationMessage For="@(() => registro.Persona)" />
            </div>

            @* Monto del registro *@
            <div class="mb-3">
                <label for="Nombre" class="form-label">Monto:</label>
                <InputNumber id="Nombre" @bind-Value="registro.Monto" class="form-control" />
                <ValidationMessage For="@(() => registro.Monto)" />
            </div>


        </div>

        <div class="card-footer bg-light d-flex justify-content-between mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">
                    <span class="bi bi-plus"></span> Nuevo
                </button>
                <button type="submit" class="btn btn-outline-success" @onclick="Guardar">
                    <span class="bi bi-check-circle-fill"></span> Guardar
                </button>
                <a href="/Registro/Index" class="btn btn-outline-danger">
                    <span class="bi bi-arrow-bar-left"></span> Retroceder
                </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    public Registro registro { get; set; } = new Registro();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            registro.AporteId = Id.Value;
            await Buscar();
        }
    }

    public void Nuevo()
    {
        registro = new Registro();
    }

    public async Task Buscar()
    {
        var registroEncontrada = await RegistroServices.Buscar(registro.AporteId);

        if (registroEncontrada != null)
        {
            registro = registroEncontrada;
        }
        else
        {
            navigationManager.NavigateTo("/Registro/Index");
        }
    }

    public async Task Guardar()
    {
        try
        {
            var guardo = await RegistroServices.Modificar(registro);
            if (guardo)
            {
                Nuevo();
                navigationManager.NavigateTo("/Registro/Index");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar la persona: {ex.Message}");
        }
    }

    public async Task Eliminar()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "¿Estás seguro de eliminar esta persona?" });
        if (confirm)
        {
            var eliminado = await RegistroServices.Eliminar(registro.AporteId);
            if (eliminado)
            {
                Nuevo();
                navigationManager.NavigateTo("/Registro/Index");
            }
        }
    }
}